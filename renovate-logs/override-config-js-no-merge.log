////////
// command
// LOG_LEVEL=debug RENOVATE_CONFIG_FILE=config.js renovate --token $TMP_GH_TOKEN --dry-run --schedule= korosuke613/renovate-playground
////////

DEBUG: Using RE2 as regex engine
DEBUG: Parsing configs
DEBUG: Checking for config file in /Users/korosuke613/ghq/github.com/korosuke613/renovate-playground/config.js
 WARN: cli config dryRun property has been changed to full
DEBUG: File config
       "config": {
         "dryRun": "full",
         "platform": "github",
         "exposeAllEnv": true,
         "printConfig": true,
         "fetchReleaseNotes": false,
         "requireConfig": "ignored",
         "force": {
           "extends": [
             ":label(renovate)",
             ":prConcurrentLimit10",
             ":timezone(Asia/Tokyo)",
             ":enableVulnerabilityAlertsWithLabel(security)",
             ":semanticCommitTypeAll(chore)",
             "schedule:monthly"
           ],
           "dependencyDashboard": true,
           "dependencyDashboardLabels": ["renovate"],
           "postUpdateOptions": ["gomodTidy"],
           "groupName": "all",
           "regexManagers": [
             {
               "fileMatch": ["^.tool-versions$"],
               "matchStrings": ["golangci-lint (?<currentValue>\\d+\\.\\d+\\.\\d+)"],
               "datasourceTemplate": "github-releases",
               "depNameTemplate": "golangci/golangci-lint",
               "extractVersionTemplate": "^v(?<version>.*)$"
             }
           ],
           "packageRules": [
             {
               "groupName": "golang-version",
               "matchDatasources": ["golang-version"],
               "matchManagers": ["gomod"]
             },
             {
               "groupName": "golang-version",
               "matchManagers": ["asdf"],
               "matchPackageNames": ["golang"]
             },
             {
               "groupName": "golangci-lint",
               "matchManagers": ["regex"],
               "matchPackageNames": ["golangci/golangci-lint"]
             }
           ]
         }
       }
DEBUG: CLI config
       "config": {
         "repositories": ["korosuke613/renovate-playground"],
         "dryRun": "full",
         "schedule": [],
         "token": "***********"
       }
DEBUG: Env config
       "config": {"hostRules": []}
DEBUG: Combined config
       "config": {
         "dryRun": "full",
         "platform": "github",
         "exposeAllEnv": true,
         "printConfig": true,
         "fetchReleaseNotes": false,
         "requireConfig": "ignored",
         "force": {
           "extends": [
             ":label(renovate)",
             ":prConcurrentLimit10",
             ":timezone(Asia/Tokyo)",
             ":enableVulnerabilityAlertsWithLabel(security)",
             ":semanticCommitTypeAll(chore)",
             "schedule:monthly"
           ],
           "dependencyDashboard": true,
           "dependencyDashboardLabels": ["renovate"],
           "postUpdateOptions": ["gomodTidy"],
           "groupName": "all",
           "regexManagers": [
             {
               "fileMatch": ["^.tool-versions$"],
               "matchStrings": ["golangci-lint (?<currentValue>\\d+\\.\\d+\\.\\d+)"],
               "datasourceTemplate": "github-releases",
               "depNameTemplate": "golangci/golangci-lint",
               "extractVersionTemplate": "^v(?<version>.*)$"
             }
           ],
           "packageRules": [
             {
               "groupName": "golang-version",
               "matchDatasources": ["golang-version"],
               "matchManagers": ["gomod"]
             },
             {
               "groupName": "golang-version",
               "matchManagers": ["asdf"],
               "matchPackageNames": ["golang"]
             },
             {
               "groupName": "golangci-lint",
               "matchManagers": ["regex"],
               "matchPackageNames": ["golangci/golangci-lint"]
             }
           ]
         },
         "hostRules": [],
         "extends": [
           ":label(renovate)",
           ":prConcurrentLimit10",
           ":timezone(Asia/Tokyo)",
           ":enableVulnerabilityAlertsWithLabel(security)",
           ":semanticCommitTypeAll(chore)",
           "schedule:monthly"
         ],
         "dependencyDashboard": true,
         "dependencyDashboardLabels": ["renovate"],
         "postUpdateOptions": ["gomodTidy"],
         "groupName": "all",
         "regexManagers": [
           {
             "fileMatch": ["^.tool-versions$"],
             "matchStrings": ["golangci-lint (?<currentValue>\\d+\\.\\d+\\.\\d+)"],
             "datasourceTemplate": "github-releases",
             "depNameTemplate": "golangci/golangci-lint",
             "extractVersionTemplate": "^v(?<version>.*)$"
           }
         ],
         "packageRules": [
           {
             "groupName": "golang-version",
             "matchDatasources": ["golang-version"],
             "matchManagers": ["gomod"]
           },
           {
             "groupName": "golang-version",
             "matchManagers": ["asdf"],
             "matchPackageNames": ["golang"]
           },
           {
             "groupName": "golangci-lint",
             "matchManagers": ["regex"],
             "matchPackageNames": ["golangci/golangci-lint"]
           }
         ],
         "repositories": ["korosuke613/renovate-playground"],
         "schedule": [],
         "token": "***********"
       }
DEBUG: Found valid git version: 2.38.1
DEBUG: Using default github endpoint: https://api.github.com/
DEBUG: GET https://api.github.com/user/emails = (code=ERR_NON_2XX_3XX_RESPONSE, statusCode=404 retryCount=0, duration=251)
DEBUG: Cannot read user/emails endpoint on GitHub to retrieve gitAuthor
DEBUG: Platform config
       "platformConfig": {
         "hostType": "github",
         "endpoint": "https://api.github.com/",
         "isGHApp": false,
         "isGhe": false,
         "userDetails": {"username": "korosuke613", "name": "Futa HIRAKOBA"},
         "userEmail": null
       },
       "renovateUsername": "korosuke613"
DEBUG: Adding token authentication for api.github.com to hostRules
DEBUG: Using baseDir: /var/folders/gf/6048_drd30d9d173y3jd61980000gp/T/renovate
DEBUG: Using cacheDir: /var/folders/gf/6048_drd30d9d173y3jd61980000gp/T/renovate/cache
DEBUG: Using containerbaseDir: /var/folders/gf/6048_drd30d9d173y3jd61980000gp/T/renovate/cache/containerbase
DEBUG: Initializing Renovate internal cache into /var/folders/gf/6048_drd30d9d173y3jd61980000gp/T/renovate/cache/renovate/renovate-cache-v1
DEBUG: Commits limit = null
DEBUG: Setting global hostRules
DEBUG: Adding token authentication for api.github.com to hostRules
DEBUG: validatePresets()
DEBUG: Reinitializing hostRules for repo
DEBUG: Clearing hostRules
DEBUG: Adding token authentication for api.github.com to hostRules
 INFO: Repository started (repository=korosuke613/renovate-playground)
       "renovateVersion": "34.50.1"
DEBUG: Using localDir: /var/folders/gf/6048_drd30d9d173y3jd61980000gp/T/renovate/repos/github/korosuke613/renovate-playground (repository=korosuke613/renovate-playground)
DEBUG: PackageFiles.clear() - Package files deleted (repository=korosuke613/renovate-playground)
DEBUG: initRepo("korosuke613/renovate-playground") (repository=korosuke613/renovate-playground)
DEBUG: korosuke613/renovate-playground default branch = main (repository=korosuke613/renovate-playground)
DEBUG: Using personal access token for git init (repository=korosuke613/renovate-playground)
DEBUG: Resetting npmrc (repository=korosuke613/renovate-playground)
DEBUG: detectSemanticCommits() (repository=korosuke613/renovate-playground)
DEBUG: Initializing git repository into /var/folders/gf/6048_drd30d9d173y3jd61980000gp/T/renovate/repos/github/korosuke613/renovate-playground (repository=korosuke613/renovate-playground)
DEBUG: Performing blobless clone (repository=korosuke613/renovate-playground)
DEBUG: git clone completed (repository=korosuke613/renovate-playground)
       "durationMs": 1546
DEBUG: latest repository commit (repository=korosuke613/renovate-playground)
       "latestCommit": {
         "hash": "3783c59509b9bac6e232f46cfc70aca1a0602af6",
         "date": "2022-12-09T14:00:50+09:00",
         "message": "fix: groups",
         "refs": "HEAD -> main, origin/main, origin/HEAD",
         "body": "",
         "author_name": "Futa HIRAKOBA",
         "author_email": "korosuke613@users.noreply.github.com"
       }
DEBUG: getCommitMessages (repository=korosuke613/renovate-playground)
DEBUG: Semantic commits detection: angular (repository=korosuke613/renovate-playground)
DEBUG: angular semantic commits detected (repository=korosuke613/renovate-playground)
DEBUG: checkOnboarding() (repository=korosuke613/renovate-playground)
DEBUG: isOnboarded() (repository=korosuke613/renovate-playground)
DEBUG: Config file will be ignored (repository=korosuke613/renovate-playground)
DEBUG: Repo is onboarded (repository=korosuke613/renovate-playground)
DEBUG: migrateAndValidate() (repository=korosuke613/renovate-playground)
DEBUG: No config migration necessary (repository=korosuke613/renovate-playground)
DEBUG: massaged config (repository=korosuke613/renovate-playground)
       "config": {
         "extends": [
           ":label(renovate)",
           ":prConcurrentLimit10",
           ":timezone(Asia/Tokyo)",
           ":enableVulnerabilityAlertsWithLabel(security)",
           ":semanticCommitTypeAll(chore)",
           "schedule:monthly"
         ]
       }
DEBUG: migrated config (repository=korosuke613/renovate-playground)
       "config": {
         "extends": [
           ":label(renovate)",
           ":prConcurrentLimit10",
           ":timezone(Asia/Tokyo)",
           ":enableVulnerabilityAlertsWithLabel(security)",
           ":semanticCommitTypeAll(chore)",
           "schedule:monthly"
         ]
       }
DEBUG: Found repo ignorePaths (repository=korosuke613/renovate-playground)
       "ignorePaths": ["**/node_modules/**", "**/bower_components/**"]
DEBUG: No vulnerability alerts found (repository=korosuke613/renovate-playground)
DEBUG: No vulnerability alerts found (repository=korosuke613/renovate-playground)
 INFO: Full resolved config and hostRules including presets (repository=korosuke613/renovate-playground)
       "config": {
         "labels": ["renovate"],
         "prConcurrentLimit": 10,
         "timezone": "Asia/Tokyo",
         "vulnerabilityAlerts": {
           "enabled": true,
           "labels": ["security"],
           "groupName": null,
           "schedule": [],
           "dependencyDashboardApproval": false,
           "stabilityDays": 0,
           "rangeStrategy": "update-lockfile",
           "commitMessageSuffix": "[SECURITY]",
           "branchTopic": "{{{datasource}}}-{{{depName}}}-vulnerability",
           "prCreation": "immediate"
         },
         "packageRules": [
           {
             "groupName": "golang-version",
             "matchDatasources": ["golang-version"],
             "matchManagers": ["gomod"]
           },
           {
             "groupName": "golang-version",
             "matchManagers": ["asdf"],
             "matchPackageNames": ["golang"]
           },
           {
             "groupName": "golangci-lint",
             "matchManagers": ["regex"],
             "matchPackageNames": ["golangci/golangci-lint"]
           }
         ],
         "schedule": [],
         "detectGlobalManagerConfig": false,
         "detectHostRulesFromEnv": false,
         "postUpgradeTasks": {
           "commands": [],
           "fileFilters": [],
           "executionMode": "update"
         },
         "onboardingBranch": "renovate/configure",
         "onboardingCommitMessage": null,
         "onboardingConfigFileName": "renovate.json",
         "onboardingNoDeps": false,
         "onboardingPrTitle": "Configure Renovate",
         "configMigration": false,
         "productLinks": {
           "documentation": "https://docs.renovatebot.com/",
           "help": "https://github.com/renovatebot/renovate/discussions",
           "homepage": "https://github.com/renovatebot/renovate"
         },
         "globalExtends": [],
         "description": [
           "Apply label `renovate` to PRs.",
           "Limit to maximum 10 open PRs at any time.",
           "Evaluate schedules according to timezone `Asia/Tokyo`.",
           "Raise PR when vulnerability alerts are detected with label `security`.",
           "If Renovate detects semantic commits, it will use semantic commit type `chore` for all commits.",
           "Schedule monthly."
         ],
         "enabled": true,
         "repositoryCache": "disabled",
         "repositoryCacheType": "local",
         "force": {
           "description": [
             "Apply label `renovate` to PRs.",
             "Limit to maximum 10 open PRs at any time.",
             "Evaluate schedules according to timezone `Asia/Tokyo`.",
             "Raise PR when vulnerability alerts are detected with label `security`.",
             "If Renovate detects semantic commits, it will use semantic commit type `chore` for all commits.",
             "Schedule monthly."
           ],
           "labels": ["renovate"],
           "prConcurrentLimit": 10,
           "timezone": "Asia/Tokyo",
           "vulnerabilityAlerts": {"enabled": true, "labels": ["security"]},
           "packageRules": [
             {"matchPackagePatterns": ["*"], "semanticCommitType": "chore"},
             {
               "groupName": "golang-version",
               "matchDatasources": ["golang-version"],
               "matchManagers": ["gomod"]
             },
             {
               "groupName": "golang-version",
               "matchManagers": ["asdf"],
               "matchPackageNames": ["golang"]
             },
             {
               "groupName": "golangci-lint",
               "matchManagers": ["regex"],
               "matchPackageNames": ["golangci/golangci-lint"]
             }
           ],
           "schedule": [],
           "dependencyDashboard": true,
           "dependencyDashboardLabels": ["renovate"],
           "postUpdateOptions": ["gomodTidy"],
           "groupName": "all",
           "regexManagers": [
             {
               "fileMatch": ["^.tool-versions$"],
               "matchStrings": ["golangci-lint (?<currentValue>\\d+\\.\\d+\\.\\d+)"],
               "datasourceTemplate": "github-releases",
               "depNameTemplate": "golangci/golangci-lint",
               "extractVersionTemplate": "^v(?<version>.*)$"
             }
           ],
           "repositories": ["korosuke613/renovate-playground"],
           "dryRun": "full"
         },
         "draftPR": false,
         "printConfig": true,
         "composerIgnorePlatformReqs": [],
         "onboarding": true,
         "onboardingConfig": {
           "$schema": "https://docs.renovatebot.com/renovate-schema.json"
         },
         "includeForks": false,
         "forkToken": null,
         "requireConfig": "ignored",
         "optimizeForDisabled": false,
         "dependencyDashboard": true,
         "dependencyDashboardApproval": false,
         "dependencyDashboardAutoclose": false,
         "dependencyDashboardTitle": "Dependency Dashboard",
         "dependencyDashboardHeader": "This issue lists Renovate updates and detected dependencies. Read the [Dependency Dashboard](https://docs.renovatebot.com/key-concepts/dashboard/) docs to learn more.",
         "dependencyDashboardFooter": null,
         "dependencyDashboardLabels": ["renovate"],
         "configWarningReuseIssue": true,
         "privateKeyPath": null,
         "privateKeyPathOld": null,
         "encrypted": null,
         "automergeSchedule": ["at any time"],
         "updateNotScheduled": true,
         "persistRepoData": false,
         "ignorePlugins": false,
         "ignoreScripts": true,
         "username": null,
         "password": null,
         "npmrc": null,
         "npmrcMerge": false,
         "npmToken": null,
         "updateLockFiles": true,
         "skipInstalls": null,
         "baseBranches": [],
         "useBaseBranchConfig": "none",
         "gitIgnoredAuthors": [],
         "enabledManagers": [],
         "includePaths": [],
         "ignorePaths": ["**/node_modules/**", "**/bower_components/**"],
         "excludeCommitPaths": [],
         "registryAliases": {},
         "defaultRegistryUrls": null,
         "registryUrls": null,
         "extractVersion": null,
         "versioning": null,
         "azureWorkItemId": 0,
         "azureAutoApprove": false,
         "ignoreDeps": [],
         "updateInternalDeps": false,
         "pinDigests": false,
         "separateMajorMinor": true,
         "separateMultipleMajor": false,
         "separateMinorPatch": false,
         "ignoreUnstable": true,
         "ignoreDeprecated": true,
         "followTag": null,
         "respectLatest": true,
         "rangeStrategy": "replace",
         "branchPrefix": "renovate/",
         "branchPrefixOld": "renovate/",
         "bumpVersion": null,
         "major": {},
         "minor": {},
         "patch": {},
         "pin": {
           "rebaseWhen": "behind-base-branch",
           "groupName": "Pin Dependencies",
           "groupSlug": "pin-dependencies",
           "commitMessageAction": "Pin",
           "group": {"commitMessageTopic": "dependencies", "commitMessageExtra": ""}
         },
         "digest": {
           "branchTopic": "{{{depNameSanitized}}}-digest",
           "commitMessageExtra": "to {{newDigestShort}}",
           "commitMessageTopic": "{{{depName}}} digest"
         },
         "pinDigest": {
           "groupName": "Pin Dependencies",
           "groupSlug": "pin-dependencies",
           "commitMessageAction": "Pin",
           "group": {"commitMessageTopic": "dependencies", "commitMessageExtra": ""}
         },
         "rollback": {
           "branchTopic": "{{{depNameSanitized}}}-rollback",
           "commitMessageAction": "Roll back",
           "semanticCommitType": "fix"
         },
         "replacement": {
           "branchTopic": "{{{depNameSanitized}}}-replacement",
           "commitMessageAction": "Replace",
           "commitMessageExtra": "with {{newName}} {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{#if isSingleVersion}}{{{prettyNewVersion}}}{{else}}{{{newValue}}}{{/if}}{{/if}}",
           "prBodyNotes": [
             "This is a special PR that replaces `{{{depNameSanitized}}}` with the community suggested minimal stable replacement version."
           ]
         },
         "semanticCommits": "enabled",
         "semanticCommitType": "chore",
         "semanticCommitScope": "deps",
         "rollbackPrs": false,
         "recreateClosed": false,
         "rebaseWhen": "auto",
         "rebaseLabel": "rebase",
         "stopUpdatingLabel": "stop-updating",
         "stabilityDays": 0,
         "internalChecksFilter": "strict",
         "prCreation": "immediate",
         "prNotPendingHours": 25,
         "prHourlyLimit": 0,
         "branchConcurrentLimit": null,
         "prPriority": 0,
         "bbUseDefaultReviewers": true,
         "automerge": false,
         "automergeType": "pr",
         "automergeStrategy": "auto",
         "automergeComment": "automergeComment",
         "ignoreTests": false,
         "transitiveRemediation": false,
         "pruneBranchAfterAutomerge": true,
         "branchName": "{{{branchPrefix}}}{{{additionalBranchPrefix}}}{{{branchTopic}}}",
         "additionalBranchPrefix": "",
         "branchTopic": "{{{depNameSanitized}}}-{{{newMajor}}}{{#if separateMinorPatch}}{{#if isPatch}}.{{{newMinor}}}{{/if}}{{/if}}.x{{#if isLockfileUpdate}}-lockfile{{/if}}",
         "commitMessage": "{{{commitMessagePrefix}}} {{{commitMessageAction}}} {{{commitMessageTopic}}} {{{commitMessageExtra}}} {{{commitMessageSuffix}}}",
         "commitBody": null,
         "commitBodyTable": false,
         "commitMessagePrefix": null,
         "commitMessageAction": "Update",
         "commitMessageTopic": "dependency {{depName}}",
         "commitMessageExtra": "to {{#if isPinDigest}}{{{newDigestShort}}}{{else}}{{#if isMajor}}{{prettyNewMajor}}{{else}}{{#if isSingleVersion}}{{prettyNewVersion}}{{else}}{{#if newValue}}{{{newValue}}}{{else}}{{{newDigestShort}}}{{/if}}{{/if}}{{/if}}{{/if}}",
         "commitMessageSuffix": null,
         "prBodyTemplate": "{{{header}}}{{{table}}}{{{warnings}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{controls}}}{{{footer}}}",
         "prTitle": null,
         "prHeader": null,
         "prFooter": "This PR has been generated by [Renovate Bot](https://github.com/renovatebot/renovate).",
         "lockFileMaintenance": {
           "enabled": false,
           "recreateClosed": true,
           "rebaseStalePrs": true,
           "branchTopic": "lock-file-maintenance",
           "commitMessageAction": "Lock file maintenance",
           "commitMessageTopic": null,
           "commitMessageExtra": null,
           "schedule": ["before 5am on monday"],
           "groupName": null,
           "prBodyDefinitions": {"Change": "All locks refreshed"}
         },
         "hashedBranchLength": null,
         "groupName": "all",
         "groupSlug": null,
         "group": {
           "branchTopic": "{{{groupSlug}}}",
           "commitMessageTopic": "{{{groupName}}}"
         },
         "addLabels": [],
         "assignees": [],
         "assigneesFromCodeOwners": false,
         "assigneesSampleSize": null,
         "assignAutomerge": false,
         "reviewers": [],
         "reviewersFromCodeOwners": false,
         "filterUnavailableUsers": false,
         "confidential": false,
         "reviewersSampleSize": null,
         "additionalReviewers": [],
         "fileMatch": [],
         "js": {},
         "golang": {"commitMessageTopic": "module {{depName}}"},
         "postUpdateOptions": ["gomodTidy"],
         "ruby": {},
         "rust": {},
         "node": {"commitMessageTopic": "Node.js"},
         "docker": {"versioning": "docker"},
         "php": {},
         "python": {},
         "constraints": {},
         "java": {},
         "dotnet": {},
         "hostRules": [],
         "prBodyDefinitions": {
           "Package": "{{{depNameLinked}}}",
           "Type": "{{{depType}}}",
           "Update": "{{{updateType}}}",
           "Current value": "{{{currentValue}}}",
           "New value": "{{{newValue}}}",
           "Change": "`{{{displayFrom}}}` -> `{{{displayTo}}}`",
           "Pending": "{{{displayPending}}}",
           "References": "{{{references}}}",
           "Package file": "{{{packageFile}}}"
         },
         "prBodyColumns": ["Package", "Type", "Update", "Change", "Pending"],
         "prBodyNotes": [],
         "suppressNotifications": ["deprecationWarningIssues"],
         "pruneStaleBranches": true,
         "unicodeEmoji": true,
         "gitLabIgnoreApprovals": false,
         "regexManagers": [
           {
             "fileMatch": ["^.tool-versions$"],
             "matchStrings": ["golangci-lint (?<currentValue>\\d+\\.\\d+\\.\\d+)"],
             "datasourceTemplate": "github-releases",
             "depNameTemplate": "golangci/golangci-lint",
             "extractVersionTemplate": "^v(?<version>.*)$"
           }
         ],
         "fetchReleaseNotes": false,
         "cloneSubmodules": false,
         "ignorePrAuthor": false,
         "updatePinnedDependencies": true,
         "gitUrl": "default",
         "writeDiscoveredRepos": null,
         "platformAutomerge": false,
         "userStrings": {
           "ignoreTopic": "Renovate Ignore Notification",
           "ignoreMajor": "As this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for *any* future {{{newMajor}}}.x releases. However, if you upgrade to {{{newMajor}}}.x manually then Renovate will reenable minor and patch updates automatically.",
           "ignoreDigest": "As this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for the `{{{depName}}}` `{{{newDigestShort}}}` update again.",
           "ignoreOther": "As this PR has been closed unmerged, Renovate will now ignore this update ({{{newValue}}}). You will still receive a PR once a newer version is released, so if you wish to permanently ignore this dependency, please add it to the `ignoreDeps` array of your renovate config."
         },
         "platformCommit": false,
         "branchNameStrict": false,
         "ansible": {"fileMatch": ["(^|/)tasks/[^/]+\\.ya?ml$"]},
         "ansible-galaxy": {
           "fileMatch": ["(^|/)requirements\\.ya?ml$", "(^|/)galaxy\\.ya?ml$"]
         },
         "argocd": {"fileMatch": []},
         "asdf": {"fileMatch": ["(^|/)\\.tool-versions$"]},
         "azure-pipelines": {
           "fileMatch": ["azure.*pipelines?.*\\.ya?ml$"],
           "enabled": false
         },
         "batect": {"fileMatch": ["(^|/)batect(-bundle)?\\.yml$"]},
         "batect-wrapper": {"fileMatch": ["(^|/)batect$"], "versioning": "semver"},
         "bazel": {"fileMatch": ["(^|/)WORKSPACE(|\\.bazel)$", "\\.bzl$"]},
         "bazelisk": {"fileMatch": ["(^|\\/)\\.bazelversion$"], "pinDigests": false},
         "bitbucket-pipelines": {
           "fileMatch": ["(^|/)\\.?bitbucket-pipelines\\.ya?ml$"]
         },
         "buildkite": {
           "fileMatch": ["buildkite\\.ya?ml", "\\.buildkite/.+\\.ya?ml$"],
           "commitMessageTopic": "buildkite plugin {{depName}}",
           "commitMessageExtra": "to {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{{newValue}}}{{/if}}"
         },
         "bundler": {"fileMatch": ["(^|/)Gemfile$"], "versioning": "ruby"},
         "cake": {"fileMatch": ["\\.cake$"]},
         "cargo": {
           "commitMessageTopic": "Rust crate {{depName}}",
           "fileMatch": ["(^|/)Cargo\\.toml$"],
           "versioning": "cargo",
           "rangeStrategy": "bump"
         },
         "cdnurl": {"fileMatch": [], "versioning": "semver"},
         "circleci": {"fileMatch": ["(^|/)\\.circleci/config\\.yml$"]},
         "cloudbuild": {"fileMatch": ["(^|/)cloudbuild\\.ya?ml"]},
         "cocoapods": {"fileMatch": ["(^|/)Podfile$"], "versioning": "ruby"},
         "composer": {
           "fileMatch": ["(^|/)([\\w-]*)composer\\.json$"],
           "versioning": "composer"
         },
         "conan": {
           "fileMatch": ["(^|/)conanfile\\.(txt|py)$"],
           "datasource": "conan",
           "versioning": "conan",
           "rangeStrategy": "bump",
           "enabled": false
         },
         "deps-edn": {"fileMatch": ["(^|/)(?:deps|bb)\\.edn$"], "versioning": "maven"},
         "docker-compose": {"fileMatch": ["(^|/)(?:docker-)?compose[^/]*\\.ya?ml$"]},
         "dockerfile": {
           "fileMatch": ["(^|/|\\.)Dockerfile$", "(^|/)Dockerfile[^/]*$"]
         },
         "droneci": {"fileMatch": ["(^|/)\\.drone\\.yml$"]},
         "fleet": {"fileMatch": ["(^|/)fleet\\.ya?ml"]},
         "flux": {
           "fileMatch": ["(^|\\/)flux-system\\/(?:.+\\/)?gotk-components\\.yaml$"]
         },
         "fvm": {
           "fileMatch": ["(^|\\/)\\.fvm\\/fvm_config\\.json$"],
           "versioning": "semver"
         },
         "git-submodules": {
           "enabled": false,
           "versioning": "git",
           "fileMatch": ["(^|/)\\.gitmodules$"]
         },
         "github-actions": {
           "fileMatch": [
             "^(workflow-templates|\\.github\\/workflows)\\/[^/]+\\.ya?ml$",
             "(^|\\/)action\\.ya?ml$"
           ]
         },
         "gitlabci": {"fileMatch": ["\\.gitlab-ci\\.yml$"]},
         "gitlabci-include": {"fileMatch": ["\\.gitlab-ci\\.yml$"]},
         "gomod": {"fileMatch": ["(^|/)go\\.mod$"]},
         "gradle": {
           "fileMatch": [
             "\\.gradle(\\.kts)?$",
             "(^|\\/)gradle\\.properties$",
             "(^|\\/)gradle\\/.+\\.toml$",
             "\\.versions\\.toml$"
           ],
           "timeout": 600,
           "versioning": "gradle"
         },
         "gradle-wrapper": {
           "fileMatch": ["(^|/)gradle/wrapper/gradle-wrapper\\.properties$"],
           "versioning": "gradle"
         },
         "helm-requirements": {
           "registryAliases": {"stable": "https://charts.helm.sh/stable"},
           "commitMessageTopic": "helm chart {{depName}}",
           "fileMatch": ["(^|/)requirements\\.yaml$"]
         },
         "helm-values": {
           "commitMessageTopic": "helm values {{depName}}",
           "fileMatch": ["(^|/)values\\.yaml$"],
           "pinDigests": false
         },
         "helmfile": {
           "registryAliases": {"stable": "https://charts.helm.sh/stable"},
           "commitMessageTopic": "helm chart {{depName}}",
           "fileMatch": ["(^|/)helmfile\\.yaml$"]
         },
         "helmsman": {"fileMatch": []},
         "helmv3": {
           "registryAliases": {"stable": "https://charts.helm.sh/stable"},
           "commitMessageTopic": "helm chart {{depName}}",
           "fileMatch": ["(^|/)Chart\\.yaml$"]
         },
         "hermit": {
           "fileMatch": ["(^|/)bin/hermit$"],
           "excludeCommitPaths": ["**/bin/hermit"],
           "versioning": "hermit"
         },
         "homebrew": {
           "commitMessageTopic": "Homebrew Formula {{depName}}",
           "fileMatch": ["^Formula/[^/]+[.]rb$"]
         },
         "html": {
           "fileMatch": ["\\.html?$"],
           "versioning": "semver",
           "digest": {"enabled": false},
           "pinDigests": false
         },
         "jenkins": {"fileMatch": ["(^|/)plugins\\.(txt|ya?ml)$"]},
         "jsonnet-bundler": {
           "fileMatch": ["(^|/)jsonnetfile\\.json$"],
           "datasource": "git-tags"
         },
         "kotlin-script": {"fileMatch": ["^.+\\.main\\.kts$"]},
         "kubernetes": {"fileMatch": []},
         "kustomize": {
           "fileMatch": ["(^|/)kustomization\\.ya?ml$"],
           "pinDigests": false
         },
         "leiningen": {"fileMatch": ["(^|/)project\\.clj$"], "versioning": "maven"},
         "maven": {
           "fileMatch": [
             "(^|/|\\.)pom\\.xml$",
             "^(((\\.mvn)|(\\.m2))/)?settings\\.xml$"
           ],
           "versioning": "maven"
         },
         "meteor": {"fileMatch": ["(^|/)package\\.js$"]},
         "mint": {"fileMatch": ["(^|\\/)Mintfile$"]},
         "mix": {"fileMatch": ["(^|/)mix\\.exs$"], "versioning": "hex"},
         "nix": {
           "fileMatch": ["(^|\\/)flake\\.nix$"],
           "commitMessageTopic": "nixpkgs",
           "commitMessageExtra": "to {{newValue}}",
           "enabled": false
         },
         "nodenv": {"fileMatch": ["(^|/)\\.node-version$"], "versioning": "node"},
         "npm": {
           "fileMatch": ["(^|/)package\\.json$"],
           "rollbackPrs": true,
           "versioning": "npm",
           "digest": {
             "prBodyDefinitions": {
               "Change": "{{#if displayFrom}}`{{{displayFrom}}}` -> {{else}}{{#if currentValue}}`{{{currentValue}}}` -> {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}"
             }
           },
           "prBodyDefinitions": {
             "Change": "[{{#if displayFrom}}`{{{displayFrom}}}` -> {{else}}{{#if currentValue}}`{{{currentValue}}}` -> {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}]({{#if depName}}https://renovatebot.com/diffs/npm/{{replace '/' '%2f' depName}}/{{{currentVersion}}}/{{{newVersion}}}{{/if}})"
           }
         },
         "nuget": {
           "fileMatch": [
             "\\.(?:cs|fs|vb)proj$",
             "\\.(?:props|targets)$",
             "(^|\\/)dotnet-tools\\.json$",
             "(^|\\/)global\\.json$"
           ]
         },
         "nvm": {
           "fileMatch": ["(^|/)\\.nvmrc$"],
           "versioning": "node",
           "pinDigests": false
         },
         "pip-compile": {
           "fileMatch": [],
           "lockFileMaintenance": {
             "enabled": true,
             "branchTopic": "pip-compile-refresh",
             "commitMessageAction": "Refresh pip-compile outputs"
           }
         },
         "pip_requirements": {
           "fileMatch": ["(^|/)([\\w-]*)requirements\\.(txt|pip)$"]
         },
         "pip_setup": {"fileMatch": ["(^|/)setup\\.py$"]},
         "pipenv": {"fileMatch": ["(^|/)Pipfile$"]},
         "poetry": {"fileMatch": ["(^|/)pyproject\\.toml$"]},
         "pre-commit": {
           "commitMessageTopic": "pre-commit hook {{depName}}",
           "enabled": false,
           "fileMatch": ["(^|/)\\.pre-commit-config\\.yaml$"],
           "prBodyNotes": [
             "Note: The `pre-commit` manager in Renovate is not supported by the `pre-commit` maintainers or community. Please do not report any problems there, instead [create a Discussion in the Renovate repository](https://github.com/renovatebot/renovate/discussions/new) if you have any questions."
           ]
         },
         "pub": {"fileMatch": ["(^|/)pubspec\\.ya?ml$"], "versioning": "npm"},
         "puppet": {"fileMatch": ["(^|\\/)Puppetfile$"]},
         "pyenv": {"fileMatch": ["(^|/)\\.python-version$"], "versioning": "docker"},
         "regex": {"pinDigests": false},
         "ruby-version": {
           "fileMatch": ["(^|/)\\.ruby-version$"],
           "versioning": "ruby"
         },
         "sbt": {
           "fileMatch": ["\\.sbt$", "project/[^/]*.scala$"],
           "versioning": "ivy"
         },
         "setup-cfg": {"fileMatch": ["(^|/)setup\\.cfg$"], "versioning": "pep440"},
         "swift": {
           "fileMatch": ["(^|/)Package\\.swift"],
           "versioning": "swift",
           "rangeStrategy": "bump",
           "pinDigests": false
         },
         "tekton": {"fileMatch": []},
         "terraform": {
           "commitMessageTopic": "Terraform {{depName}}",
           "fileMatch": ["\\.tf$"],
           "pinDigests": false
         },
         "terraform-version": {
           "fileMatch": ["(^|/)\\.terraform-version$"],
           "versioning": "hashicorp",
           "extractVersion": "^v(?<version>.*)$"
         },
         "terragrunt": {
           "commitMessageTopic": "Terragrunt dependency {{depName}}",
           "fileMatch": ["(^|/)terragrunt\\.hcl$"],
           "versioning": "hashicorp"
         },
         "terragrunt-version": {
           "fileMatch": ["(^|/)\\.terragrunt-version$"],
           "versioning": "hashicorp",
           "extractVersion": "^v(?<version>.+)$"
         },
         "tflint-plugin": {
           "commitMessageTopic": "TFLint plugin {{depName}}",
           "fileMatch": ["\\.tflint\\.hcl$"],
           "extractVersion": "^v(?<version>.*)$"
         },
         "travis": {
           "fileMatch": ["^\\.travis\\.yml$"],
           "major": {"enabled": false},
           "versioning": "node"
         },
         "velaci": {"fileMatch": ["(^|/)\\.vela\\.ya?ml$"]},
         "woodpecker": {"fileMatch": ["(^|\\/)\\.woodpecker[^/]*\\.ya?ml$"]},
         "renovateUsername": "korosuke613",
         "repository": "korosuke613/renovate-playground",
         "errors": [],
         "warnings": [],
         "branchList": [],
         "defaultBranch": "main",
         "isFork": false,
         "repoFingerprint": "729779f22b7ab14e1c2abc4dfa900fd2b694790bbf0ab5722ab0f748b0773d0b69b336a0589c77348858015965d4e3040d17b16e36c5f186ba31075055903e6a",
         "baseBranch": "main",
         "repoIsOnboarded": true,
         "repositories": ["korosuke613/renovate-playground"],
         "dryRun": "full",
         "renovateJsonPresent": true
       },
       "hostRules": [
         {"timeout": 60000},
         {
           "matchHost": "api.github.com",
           "token": "***********",
           "hostType": "github",
           "resolvedHost": "api.github.com"
         }
       ]
DEBUG: findIssue(Dependency Dashboard) (repository=korosuke613/renovate-playground)
DEBUG: Retrieving issueList (repository=korosuke613/renovate-playground)
DEBUG: Retrieved 0 issues (repository=korosuke613/renovate-playground)
DEBUG: No baseBranches (repository=korosuke613/renovate-playground)
DEBUG: extract() (repository=korosuke613/renovate-playground)
DEBUG: Setting current branch to main (repository=korosuke613/renovate-playground)
DEBUG: latest commit (repository=korosuke613/renovate-playground)
       "branchName": "main",
       "latestCommitDate": "2022-12-09T14:00:50+09:00"
DEBUG: Using file match: (^|/)tasks/[^/]+\.ya?ml$ for manager ansible (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)requirements\.ya?ml$ for manager ansible-galaxy (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)galaxy\.ya?ml$ for manager ansible-galaxy (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.tool-versions$ for manager asdf (repository=korosuke613/renovate-playground)
DEBUG: Using file match: azure.*pipelines?.*\.ya?ml$ for manager azure-pipelines (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)batect(-bundle)?\.yml$ for manager batect (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)batect$ for manager batect-wrapper (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)WORKSPACE(|\.bazel)$ for manager bazel (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.bzl$ for manager bazel (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)\.bazelversion$ for manager bazelisk (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.?bitbucket-pipelines\.ya?ml$ for manager bitbucket-pipelines (repository=korosuke613/renovate-playground)
DEBUG: Using file match: buildkite\.ya?ml for manager buildkite (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.buildkite/.+\.ya?ml$ for manager buildkite (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Gemfile$ for manager bundler (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.cake$ for manager cake (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Cargo\.toml$ for manager cargo (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.circleci/config\.yml$ for manager circleci (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)cloudbuild\.ya?ml for manager cloudbuild (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Podfile$ for manager cocoapods (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)([\w-]*)composer\.json$ for manager composer (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)conanfile\.(txt|py)$ for manager conan (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)(?:deps|bb)\.edn$ for manager deps-edn (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)(?:docker-)?compose[^/]*\.ya?ml$ for manager docker-compose (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/|\.)Dockerfile$ for manager dockerfile (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Dockerfile[^/]*$ for manager dockerfile (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.drone\.yml$ for manager droneci (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)fleet\.ya?ml for manager fleet (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)flux-system\/(?:.+\/)?gotk-components\.yaml$ for manager flux (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)\.fvm\/fvm_config\.json$ for manager fvm (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.gitmodules$ for manager git-submodules (repository=korosuke613/renovate-playground)
DEBUG: Using file match: ^(workflow-templates|\.github\/workflows)\/[^/]+\.ya?ml$ for manager github-actions (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)action\.ya?ml$ for manager github-actions (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.gitlab-ci\.yml$ for manager gitlabci (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.gitlab-ci\.yml$ for manager gitlabci-include (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)go\.mod$ for manager gomod (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.gradle(\.kts)?$ for manager gradle (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)gradle\.properties$ for manager gradle (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)gradle\/.+\.toml$ for manager gradle (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.versions\.toml$ for manager gradle (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)gradle/wrapper/gradle-wrapper\.properties$ for manager gradle-wrapper (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)requirements\.yaml$ for manager helm-requirements (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)values\.yaml$ for manager helm-values (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)helmfile\.yaml$ for manager helmfile (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Chart\.yaml$ for manager helmv3 (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)bin/hermit$ for manager hermit (repository=korosuke613/renovate-playground)
DEBUG: Using file match: ^Formula/[^/]+[.]rb$ for manager homebrew (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.html?$ for manager html (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)plugins\.(txt|ya?ml)$ for manager jenkins (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)jsonnetfile\.json$ for manager jsonnet-bundler (repository=korosuke613/renovate-playground)
DEBUG: Using file match: ^.+\.main\.kts$ for manager kotlin-script (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)kustomization\.ya?ml$ for manager kustomize (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)project\.clj$ for manager leiningen (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/|\.)pom\.xml$ for manager maven (repository=korosuke613/renovate-playground)
DEBUG: Using file match: ^(((\.mvn)|(\.m2))/)?settings\.xml$ for manager maven (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)package\.js$ for manager meteor (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)Mintfile$ for manager mint (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)mix\.exs$ for manager mix (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)flake\.nix$ for manager nix (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.node-version$ for manager nodenv (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)package\.json$ for manager npm (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.(?:cs|fs|vb)proj$ for manager nuget (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.(?:props|targets)$ for manager nuget (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)dotnet-tools\.json$ for manager nuget (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)global\.json$ for manager nuget (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.nvmrc$ for manager nvm (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)([\w-]*)requirements\.(txt|pip)$ for manager pip_requirements (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)setup\.py$ for manager pip_setup (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Pipfile$ for manager pipenv (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)pyproject\.toml$ for manager poetry (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.pre-commit-config\.yaml$ for manager pre-commit (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)pubspec\.ya?ml$ for manager pub (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)Puppetfile$ for manager puppet (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.python-version$ for manager pyenv (repository=korosuke613/renovate-playground)
DEBUG: Using file match: ^.tool-versions$ for manager regex (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.ruby-version$ for manager ruby-version (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.sbt$ for manager sbt (repository=korosuke613/renovate-playground)
DEBUG: Using file match: project/[^/]*.scala$ for manager sbt (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)setup\.cfg$ for manager setup-cfg (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)Package\.swift for manager swift (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.tf$ for manager terraform (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.terraform-version$ for manager terraform-version (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)terragrunt\.hcl$ for manager terragrunt (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.terragrunt-version$ for manager terragrunt-version (repository=korosuke613/renovate-playground)
DEBUG: Using file match: \.tflint\.hcl$ for manager tflint-plugin (repository=korosuke613/renovate-playground)
DEBUG: Using file match: ^\.travis\.yml$ for manager travis (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|/)\.vela\.ya?ml$ for manager velaci (repository=korosuke613/renovate-playground)
DEBUG: Using file match: (^|\/)\.woodpecker[^/]*\.ya?ml$ for manager woodpecker (repository=korosuke613/renovate-playground)
DEBUG: Matched 1 file(s) for manager asdf: .tool-versions (repository=korosuke613/renovate-playground)
DEBUG: Matched 1 file(s) for manager gomod: go.mod (repository=korosuke613/renovate-playground)
DEBUG: Matched 1 file(s) for manager regex: .tool-versions (repository=korosuke613/renovate-playground)
DEBUG: Found asdf package files (repository=korosuke613/renovate-playground)
DEBUG: Found gomod package files (repository=korosuke613/renovate-playground)
DEBUG: Found regex package files (repository=korosuke613/renovate-playground)
DEBUG: Found 3 package file(s) (repository=korosuke613/renovate-playground)
 INFO: Dependency extraction complete (repository=korosuke613/renovate-playground, baseBranch=main)
       "stats": {
         "managers": {
           "asdf": {"fileCount": 1, "depCount": 3},
           "gomod": {"fileCount": 1, "depCount": 2},
           "regex": {"fileCount": 1, "depCount": 1}
         },
         "total": {"fileCount": 3, "depCount": 6}
       }
DEBUG: PackageFiles.add() - Package file saved for base branch (repository=korosuke613/renovate-playground, baseBranch=main)
DEBUG: Package releases lookups complete (repository=korosuke613/renovate-playground, baseBranch=main)
DEBUG: branchifyUpgrades (repository=korosuke613/renovate-playground)
DEBUG: Using group branchName template (repository=korosuke613/renovate-playground)
DEBUG: Dependency golang is part of group all (repository=korosuke613/renovate-playground)
DEBUG: Using group branchName template (repository=korosuke613/renovate-playground)
DEBUG: Dependency go is part of group all (repository=korosuke613/renovate-playground)
DEBUG: Using group branchName template (repository=korosuke613/renovate-playground)
DEBUG: Dependency go.uber.org/zap is part of group all (repository=korosuke613/renovate-playground)
DEBUG: Using group branchName template (repository=korosuke613/renovate-playground)
DEBUG: Dependency golangci/golangci-lint is part of group all (repository=korosuke613/renovate-playground)
DEBUG: 4 flattened updates found: golang, go, go.uber.org/zap, golangci/golangci-lint (repository=korosuke613/renovate-playground)
DEBUG: Returning 1 branch(es) (repository=korosuke613/renovate-playground)
DEBUG: config.repoIsOnboarded=true (repository=korosuke613/renovate-playground)
DEBUG: packageFiles with updates (repository=korosuke613/renovate-playground, baseBranch=main)
       "config": {
         "asdf": [
           {
             "packageFile": ".tool-versions",
             "deps": [
               {
                 "depName": "goreleaser",
                 "skipReason": "unsupported-datasource",
                 "depIndex": 0,
                 "updates": []
               },
               {
                 "currentValue": "1.18.1",
                 "depName": "golang",
                 "datasource": "github-tags",
                 "packageName": "golang/go",
                 "versioning": "semver",
                 "extractVersion": "^go(?<version>\\S+)",
                 "depIndex": 1,
                 "updates": [
                   {
                     "bucket": "non-major",
                     "newVersion": "1.19.4",
                     "newValue": "1.19.4",
                     "releaseTimestamp": "2022-12-06T19:30:53.000Z",
                     "newMajor": 1,
                     "newMinor": 19,
                     "updateType": "minor",
                     "branchName": "renovate/all"
                   }
                 ],
                 "warnings": [],
                 "sourceUrl": "https://github.com/golang/go",
                 "currentVersion": "1.18.1",
                 "isSingleVersion": true,
                 "fixedVersion": "1.18.1"
               },
               {
                 "depName": "golangci-lint",
                 "skipReason": "unsupported-datasource",
                 "depIndex": 2,
                 "updates": []
               }
             ]
           }
         ],
         "gomod": [
           {
             "packageFile": "go.mod",
             "deps": [
               {
                 "managerData": {"lineNumber": 2},
                 "depName": "go",
                 "depType": "golang",
                 "currentValue": "1.18",
                 "datasource": "golang-version",
                 "versioning": "npm",
                 "rangeStrategy": "replace",
                 "depIndex": 0,
                 "updates": [
                   {
                     "bucket": "non-major",
                     "newVersion": "1.19.4",
                     "newValue": "1.19",
                     "releaseTimestamp": "2022-12-06T00:00:00.000Z",
                     "newMajor": 1,
                     "newMinor": 19,
                     "updateType": "minor",
                     "isRange": true,
                     "branchName": "renovate/all"
                   }
                 ],
                 "warnings": [],
                 "sourceUrl": "https://github.com/golang/go",
                 "homepage": "https://go.dev/",
                 "currentVersion": "1.18.9",
                 "isSingleVersion": false
               },
               {
                 "managerData": {"lineNumber": 4},
                 "depName": "go.uber.org/zap",
                 "depType": "require",
                 "currentValue": "v1.20.0",
                 "datasource": "go",
                 "depIndex": 1,
                 "updates": [
                   {
                     "bucket": "non-major",
                     "newVersion": "v1.24.0",
                     "newValue": "v1.24.0",
                     "releaseTimestamp": "2022-11-30T18:30:33.000Z",
                     "newMajor": 1,
                     "newMinor": 24,
                     "updateType": "minor",
                     "branchName": "renovate/all"
                   }
                 ],
                 "warnings": [],
                 "versioning": "semver",
                 "sourceUrl": "https://github.com/uber-go/zap",
                 "currentVersion": "v1.20.0",
                 "isSingleVersion": true,
                 "fixedVersion": "v1.20.0"
               }
             ]
           }
         ],
         "regex": [
           {
             "packageFile": ".tool-versions",
             "deps": [
               {
                 "depName": "golangci/golangci-lint",
                 "currentValue": "1.49.0",
                 "datasource": "github-releases",
                 "extractVersion": "^v(?<version>.*)$",
                 "replaceString": "golangci-lint 1.49.0",
                 "depIndex": 0,
                 "updates": [
                   {
                     "bucket": "non-major",
                     "newVersion": "1.50.1",
                     "newValue": "1.50.1",
                     "releaseTimestamp": "2022-10-22T11:11:45.000Z",
                     "newMajor": 1,
                     "newMinor": 50,
                     "updateType": "minor",
                     "branchName": "renovate/all"
                   }
                 ],
                 "warnings": [],
                 "versioning": "semver",
                 "sourceUrl": "https://github.com/golangci/golangci-lint",
                 "currentVersion": "1.49.0",
                 "isSingleVersion": true,
                 "fixedVersion": "1.49.0"
               }
             ],
             "matchStrings": ["golangci-lint (?<currentValue>\\d+\\.\\d+\\.\\d+)"],
             "depNameTemplate": "golangci/golangci-lint",
             "datasourceTemplate": "github-releases",
             "extractVersionTemplate": "^v(?<version>.*)$"
           }
         ]
       }
DEBUG: processRepo() (repository=korosuke613/renovate-playground)
DEBUG: Processing 1 branch: renovate/all (repository=korosuke613/renovate-playground)
DEBUG: Calculating prConcurrentLimit (10) (repository=korosuke613/renovate-playground)
DEBUG: getBranchPr(renovate/all) (repository=korosuke613/renovate-playground)
DEBUG: findPr(renovate/all, undefined, open) (repository=korosuke613/renovate-playground)
DEBUG: getPrList success (repository=korosuke613/renovate-playground)
       "pullsTotal": 2,
       "requestsTotal": 1,
       "apiQuotaAffected": true
DEBUG: findPr(renovate/all, undefined, closed) (repository=korosuke613/renovate-playground)
DEBUG: 0 PRs are currently open (repository=korosuke613/renovate-playground)
DEBUG: PR concurrent limit remaining: 10 (repository=korosuke613/renovate-playground)
DEBUG: Calculated maximum PRs remaining this run: 10 (repository=korosuke613/renovate-playground)
DEBUG: PullRequests limit = 10 (repository=korosuke613/renovate-playground)
DEBUG: Calculating branchConcurrentLimit (10) (repository=korosuke613/renovate-playground)
DEBUG: 1 already existing branches found: renovate/all (repository=korosuke613/renovate-playground)
DEBUG: Branch concurrent limit remaining: 9 (repository=korosuke613/renovate-playground)
DEBUG: Calculated maximum branches remaining this run: 9 (repository=korosuke613/renovate-playground)
DEBUG: Branches limit = 9 (repository=korosuke613/renovate-playground)
DEBUG: syncBranchState() (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: syncBranchState(): Branch cache not found, creating minimal branchState (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: getBranchPr(renovate/all) (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: findPr(renovate/all, undefined, open) (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: findPr(renovate/all, undefined, closed) (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: branchExists=true (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: dependencyDashboardCheck=undefined (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: recreateClosed is true (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: Checking if PR has been edited (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: branch.isModified(): using git to calculate (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: branch.isModified() = true (repository=korosuke613/renovate-playground, branch=renovate/all)
       "branchName": "renovate/all",
       "lastAuthor": "29139614+renovate[bot]@users.noreply.github.com",
       "gitAuthorEmail": "renovate@whitesourcesoftware.com"
DEBUG: findPr(renovate/all, undefined, !open) (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: Branch has been edited but found no PR - skipping (repository=korosuke613/renovate-playground, branch=renovate/all)
DEBUG: getBranchPr(renovate/all) (repository=korosuke613/renovate-playground)
DEBUG: findPr(renovate/all, undefined, open) (repository=korosuke613/renovate-playground)
DEBUG: findPr(renovate/all, undefined, closed) (repository=korosuke613/renovate-playground)
DEBUG: branch.isBehindBase(): using git to calculate (repository=korosuke613/renovate-playground)
DEBUG: branch.isBehindBase(): true (repository=korosuke613/renovate-playground)
       "currentBranch": "main",
       "currentBranchSha": "3783c59509b9bac6e232f46cfc70aca1a0602af6"
DEBUG: isBranchConflicted(main, renovate/all) (repository=korosuke613/renovate-playground)
DEBUG: branch.isConflicted(): using git to calculate (repository=korosuke613/renovate-playground)
DEBUG: Setting git author name: Renovate Bot (repository=korosuke613/renovate-playground)
DEBUG: Setting git author email: renovate@whitesourcesoftware.com (repository=korosuke613/renovate-playground)
DEBUG: branch.isConflicted(): false (repository=korosuke613/renovate-playground)
DEBUG: Ensuring Dependency Dashboard (repository=korosuke613/renovate-playground)
 INFO: DRY-RUN: Would ensure Dependency Dashboard (repository=korosuke613/renovate-playground)
       "title": "Dependency Dashboard"
 INFO: DRY-RUN: Would save repository cache. (repository=korosuke613/renovate-playground)
DEBUG: Removing any stale branches (repository=korosuke613/renovate-playground)
DEBUG: config.repoIsOnboarded=true (repository=korosuke613/renovate-playground)
DEBUG: Branch lists (repository=korosuke613/renovate-playground)
       "branchList": ["renovate/all"],
       "renovateBranches": ["renovate/all", "renovate/golang-version", "renovate/golangci-lint"]
DEBUG: remainingBranches=renovate/golang-version,renovate/golangci-lint (repository=korosuke613/renovate-playground)
DEBUG: findPr(renovate/golang-version, undefined, open) (repository=korosuke613/renovate-playground)
DEBUG: branch.isModified(): using git to calculate (repository=korosuke613/renovate-playground)
DEBUG: branch.isModified() = true (repository=korosuke613/renovate-playground)
       "branchName": "renovate/golang-version",
       "lastAuthor": "29139614+renovate[bot]@users.noreply.github.com",
       "gitAuthorEmail": "renovate@whitesourcesoftware.com"
DEBUG: setCachedModifiedResult(): Branch cache not present (repository=korosuke613/renovate-playground)
DEBUG: Orphan Branch is modified - skipping branch deletion (repository=korosuke613/renovate-playground)
DEBUG: findPr(renovate/golangci-lint, undefined, open) (repository=korosuke613/renovate-playground)
DEBUG: branch.isModified(): using git to calculate (repository=korosuke613/renovate-playground)
DEBUG: branch.isModified() = true (repository=korosuke613/renovate-playground)
       "branchName": "renovate/golangci-lint",
       "lastAuthor": "29139614+renovate[bot]@users.noreply.github.com",
       "gitAuthorEmail": "renovate@whitesourcesoftware.com"
DEBUG: setCachedModifiedResult(): Branch cache not present (repository=korosuke613/renovate-playground)
DEBUG: Orphan Branch is modified - skipping branch deletion (repository=korosuke613/renovate-playground)
DEBUG: PackageFiles.clear() - Package files deleted (repository=korosuke613/renovate-playground)
DEBUG: Repo is activated (repository=korosuke613/renovate-playground)
DEBUG: Branch summary (repository=korosuke613/renovate-playground)
       "cacheModified": undefined,
       "baseBranches": [{"branchName": "main", "sha": "3783c59509b9bac6e232f46cfc70aca1a0602af6"}],
       "branches": [
         {
           "automerge": false,
           "baseBranch": "main",
           "baseBranchSha": "3783c59509b9bac6e232f46cfc70aca1a0602af6",
           "branchName": "renovate/all",
           "branchSha": "9d62c0e9c132819392fdefb543d865d534ac305b",
           "isModified": true,
           "isPristine": false
         }
       ],
       "inactiveBranches": []
DEBUG: Renovate repository PR statistics (repository=korosuke613/renovate-playground)
       "stats": {"total": 2, "open": 1, "closed": 0, "merged": 1}
DEBUG: Repository result: done, status: activated, enabled: true, onboarded: true (repository=korosuke613/renovate-playground)
DEBUG: Repository timing splits (milliseconds) (repository=korosuke613/renovate-playground)
       "splits": {"init": 2859, "extract": 501, "lookup": 3065, "onboarding": 0, "update": 455},
       "total": 7924
DEBUG: Package cache statistics (repository=korosuke613/renovate-playground)
       "get": {"count": 2, "avgMs": 13, "medianMs": 9, "maxMs": 16},
       "set": {"count": 0}
DEBUG: http statistics (repository=korosuke613/renovate-playground)
       "urls": {
         "https://api.github.com/graphql (POST,200)": 6,
         "https://api.github.com/repos/golangci/golangci-lint/releases (GET,200)": 1,
         "https://api.github.com/repos/korosuke613/renovate-playground/pulls (GET,200)": 1,
         "https://api.github.com/repositories/132145189/releases (GET,200)": 1
       },
       "hostStats": {"api.github.com": {"requestCount": 9, "requestAvgMs": 694, "queueAvgMs": 0}},
       "totalRequests": 9
DEBUG: dns cache (repository=korosuke613/renovate-playground)
       "hosts": []
 INFO: Repository finished (repository=korosuke613/renovate-playground)
       "cloned": true,
       "durationMs": 7924
DEBUG: Renovate exiting
